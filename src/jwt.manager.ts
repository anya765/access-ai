import { readFileSync, writeFileSync } from 'fs';
import { escapeRegExp } from 'lodash';
import { v4 as uuidv4 } from 'uuid';
import { promises as fsPromises } from 'fs';
import { join } from 'path';

async function updateENV() {
  const file = readFileSync('./.env', 'utf-8');
  let fileJson = file.split('\n');

  for (let i = 0; i < fileJson.length; i++) {
    if (fileJson[i].search('JWT_TOKEN_SECRET=') == 0) {
      fileJson[i] = 'JWT_TOKEN_SECRET=' + `${uuidv4()}${Date.now()}`;
    }
    if (i < fileJson.length - 1) {
      fileJson[i] = fileJson[i] + '\n';
    }
  }
  const newENV = replaceAll(fileJson.toString(), '\n,', '\n');
  await asyncWriteFile('../.env', newENV);

  console.log('\n\t--> New ENV generated by JWT manager');
}

function replaceAll(str, find, replace) {
  return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
}

async function asyncWriteFile(filename: string, data: any) {
  /**
   * flags:
   *  - w = Open file for reading and writing. File is created if not exists
   *  - a+ = Open file for reading and appending. The file is created if not exists
   */
  try {
    await fsPromises.writeFile(join(__dirname, filename), data, {
      flag: 'w',
    });

    const contents = await fsPromises.readFile(
      join(__dirname, filename),
      'utf-8',
    );

    return contents;
  } catch (err) {
    console.log(err);
    return 'Something went wrong';
  }
}

// updateENV();
